# -*- mode: ruby -*-
# vi: set ft=ruby :

# read the env
require 'json'
file = File.read('env.json')
data = JSON.parse(file)
numberOfNodes=data["numberOfNodes"].to_i


$HOSTFILE = <<EOF
# Create python script
cat << PYTHON > createhostfile.py
import json
with open('/vagrant/env.json') as data_file:    
  data = json.load(data_file)
numberOfNodes=int(data["numberOfNodes"]) | 2 
if numberOfNodes > 10:
  numberOfNodes=10
  print "Maximum number of nodes exceeded - setting to 10"
print "Number of nodes: "+str(numberOfNodes)
subnet=data["subnet"]
f = open('/etc/hosts', 'w')
f.write('127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\n')
f.write('::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\n')
for x in range(1,numberOfNodes+1):
  f.write(subnet+'.'+str(10+x)+' node'+str(x)+' node'+str(x)+'.test\n')
f.close()
PYTHON
python createhostfile.py
rc=$?
rm -f createhostfile.py
exit $rc
EOF

$NODE_SCRIPT = <<EOF
echo "Preparing node..."

# ensure the time is up to date
apt-get update
apt-get -y install ntp
service ntp stop
ntpdate -s time.nist.gov
service ntp start
apt-get -y install build-essential ruby-dev git curl build-essential libxml2-dev libxslt-dev libssl-dev autoconf 
# install chef
if [ ! -e /opt/chef/bin/chef-solo ] ; then
  curl -L https://www.opscode.com/chef/install.sh | bash
fi
# check chef installed
chef-solo -v | grep -v grep | grep "Chef:"
if [ "$?" != 0 ]; then
  echo "failed to install chef"
  exit 1
fi

# /etc/chef isnt generated on install!
mkdir /etc/chef
cat << CONTENT > /etc/chef/solo.rb
cookbook_path [
               '/vagrant/chef-cookbooks'
              ]
CONTENT

# install berkshelf
if [ ! -e /opt/chef/embedded/bin/berks ] ; then
    /opt/chef/embedded/bin/gem install berkshelf --no-ri --no-rdoc
    ln -s /opt/chef/embedded/bin/berks /usr/local/bin/berks
fi

# get web app cookbook from git
cd /vagrant
git clone https://github.com/jherbage/chef-cookbooks

# config for the web app and nginx in here
privateIp=`hostname -I | cut -d" " -f2`
sed -i "s/^{/{\"private-ip\": \"${privateIp}\",/"  node.json


#install web app 
chef-solo --override-runlist "recipe[HelloWorldNodeJS]" -j node.json

EOF

# Installs my nginx recipe which includes a template to load balance across the nodes defined in env.json	
$LB_SCRIPT = <<EOF
# Install nginx
chef-solo --override-runlist "recipe[nginx]" -j /vagrant/node.json	
EOF

# Test that all of the load balanced nodes are responding - we will attempt 10 x connections (in case not round robin)
$LB_TEST_SCRIPT = <<EOF
# Create python script
cat << PYTHON > testwebapp.py
import json
import requests
import re
with open('/vagrant/env.json') as data_file:    
  data = json.load(data_file)
numberOfNodes=int(data["numberOfNodes"])
numberOfAttempts=numberOfNodes * 10
success=False
p = re.compile('Hello World from node(\\d+)')
seenHosts={}
for x in range(0,numberOfAttempts-1):
  #print "attempt "+str(x)
  try:
    r = requests.get("http://"+data["hosts"][0]+":"+data["listening_port"])
    #print "response: "+r.content
    matches=p.search(r.content)
	
  except:
    pass
  if matches is not None and matches.groups > 1:
    print "seen node"+matches.group(1)
    seenHosts[matches.group(1)] = "OK"  
  if len(seenHosts) == numberOfNodes:
    print "All nodes served by the load balancer"
    exit(0)
print "Some nodes were not served by the load balancer: Expected "+str(numberOfNodes)+" nodes but only saw these "+str(len(seenHosts))+" nodes: "+','.join(seenHosts.keys())
exit(1)
PYTHON
python testwebapp.py
rc=$?
rm -f testwebapp.py
exit $rc
EOF

def set_hostname(server)
  server.vm.provision 'shell', inline: "hostname #{server.vm.hostname}"
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "puppetlabs/ubuntu-14.04-64-nocm"

  config.vm.provision "shell", inline: $HOSTFILE
  config.vm.provision :shell, inline: $NODE_SCRIPT
  # eth1
  (2..numberOfNodes).each do|n|
    config.vm.define "node"+n.to_s do |node|
      node.vm.network "private_network", ip: data["subnet"]+"."+(n+10)
	  node.vm.hostname = "node"+n.to_s+".test"
	  set_hostname(node)
	  node.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--memory", "512"]
        v.customize ["modifyvm", :id, "--cpus", "1"]
      end
    end
  end

  # load balancer master node  
  config.vm.define "node1" do |node|
    node.vm.network "private_network", ip: data["subnet"]+".11"
	node.vm.hostname = "node1.test"
	set_hostname(node)
	node.vm.provision :shell, inline: $LB_SCRIPT
	node.vm.provision :shell, inline: $LB_TEST_SCRIPT
	node.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", "512"]
      v.customize ["modifyvm", :id, "--cpus", "1"]
    end

  end
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
